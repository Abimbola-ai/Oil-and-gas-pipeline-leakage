{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "# Fitting Polynomial Regression to the dataset\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.pipeline import make_pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Wellhead Temp. (C)</th>\n",
       "      <th>Wellhead Press (psi)</th>\n",
       "      <th>MMCFD- gas</th>\n",
       "      <th>BOPD (barrel of oil produced per day)</th>\n",
       "      <th>BWPD (barrel of water produced per day)</th>\n",
       "      <th>BSW - basic solid and water (%)</th>\n",
       "      <th>CO2 mol. (%) @ 25 C &amp; 1 Atm.</th>\n",
       "      <th>Gas Grav.</th>\n",
       "      <th>CR-corrosion defect</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>64.13</td>\n",
       "      <td>2058.81</td>\n",
       "      <td>2.53</td>\n",
       "      <td>1307.94</td>\n",
       "      <td>5815.68</td>\n",
       "      <td>21.06</td>\n",
       "      <td>4.1099</td>\n",
       "      <td>0.7434</td>\n",
       "      <td>0.4052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>68.21</td>\n",
       "      <td>1883.68</td>\n",
       "      <td>2.73</td>\n",
       "      <td>610.06</td>\n",
       "      <td>6343.57</td>\n",
       "      <td>9.71</td>\n",
       "      <td>0.9330</td>\n",
       "      <td>0.7421</td>\n",
       "      <td>0.4044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>45.27</td>\n",
       "      <td>948.74</td>\n",
       "      <td>3.90</td>\n",
       "      <td>480.06</td>\n",
       "      <td>6251.32</td>\n",
       "      <td>23.71</td>\n",
       "      <td>4.1899</td>\n",
       "      <td>0.7915</td>\n",
       "      <td>0.3997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>66.97</td>\n",
       "      <td>2036.34</td>\n",
       "      <td>15.26</td>\n",
       "      <td>700.38</td>\n",
       "      <td>7795.69</td>\n",
       "      <td>61.04</td>\n",
       "      <td>1.6463</td>\n",
       "      <td>0.9139</td>\n",
       "      <td>0.3991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>67.21</td>\n",
       "      <td>1340.54</td>\n",
       "      <td>10.36</td>\n",
       "      <td>1209.46</td>\n",
       "      <td>123.96</td>\n",
       "      <td>20.47</td>\n",
       "      <td>2.1917</td>\n",
       "      <td>0.8877</td>\n",
       "      <td>0.3980</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Wellhead Temp. (C)  Wellhead Press (psi)  MMCFD- gas  \\\n",
       "0               64.13               2058.81        2.53   \n",
       "1               68.21               1883.68        2.73   \n",
       "2               45.27                948.74        3.90   \n",
       "3               66.97               2036.34       15.26   \n",
       "4               67.21               1340.54       10.36   \n",
       "\n",
       "   BOPD (barrel of oil produced per day)  \\\n",
       "0                                1307.94   \n",
       "1                                 610.06   \n",
       "2                                 480.06   \n",
       "3                                 700.38   \n",
       "4                                1209.46   \n",
       "\n",
       "   BWPD (barrel of water produced per day)  BSW - basic solid and water (%)  \\\n",
       "0                                  5815.68                            21.06   \n",
       "1                                  6343.57                             9.71   \n",
       "2                                  6251.32                            23.71   \n",
       "3                                  7795.69                            61.04   \n",
       "4                                   123.96                            20.47   \n",
       "\n",
       "   CO2 mol. (%) @ 25 C & 1 Atm.  Gas Grav.  CR-corrosion defect   \n",
       "0                        4.1099     0.7434                0.4052  \n",
       "1                        0.9330     0.7421                0.4044  \n",
       "2                        4.1899     0.7915                0.3997  \n",
       "3                        1.6463     0.9139                0.3991  \n",
       "4                        2.1917     0.8877                0.3980  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = pd.read_csv('data.csv')\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df1[['BOPD (barrel of oil produced per day)']].values\n",
    "y = df1.iloc[:,8].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Transform our x input to 1, x and x^2\n",
    "# pre_process = PolynomialFeatures(degree=2)\n",
    "# X_poly = pre_process.fit_transform(X)\n",
    "# # Show the transformation on the notebook\n",
    "# X_poly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the dataset into the Training set and Test set\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Polynomial Regression-nth order\n",
    "plt.scatter(X_test, y_test, s=10, alpha=0.3)\n",
    "\n",
    "for degree in [1,2,3,4,5,6,7]:\n",
    "\n",
    "    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())\n",
    "\n",
    "    model.fit(X_train,y_train)\n",
    "\n",
    "    y_plot = model.predict(X_test)\n",
    "\n",
    "    plt.plot(X_test, y_plot, label=\"degree %d\" % degree\n",
    "\n",
    "             +'; $R^2$: %.2f' % model.score(X_test, y_test))\n",
    "\n",
    "plt.legend(loc='upper right')\n",
    "\n",
    "plt.xlabel(\"Test Wellhead pressure Data\")\n",
    "\n",
    "plt.ylabel(\"Predicted Corrosion depth\")\n",
    "\n",
    "plt.title(\"Variance Explained with Varying Polynomial\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(X_train,y_train)\n",
    "#model.fit(X_poly,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#y_pred = model.predict(X_poly)\n",
    "y_pred = model.predict(X_test)\n",
    "#print(predictions[0:5]),print(y_test[0:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To make predictions on the test data\n",
    "plt.title('True values vs prediction - Simple Linear Regression')\n",
    "plt.scatter(y_test, y_pred)\n",
    "plt.xlabel(\"True values\")\n",
    "plt.ylabel(\"Predictions\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Score:\", model.score(X_test, y_test))\n",
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(\"Score:\", model.score(X_poly, y_pred))\n",
    "# from sklearn import metrics\n",
    "# from sklearn.metrics import mean_squared_error, r2_score\n",
    "# print('Mean Absolute Error:', metrics.mean_absolute_error(y, y_pred))  \n",
    "# print('Mean Squared Error:', metrics.mean_squared_error(y, y_pred))  \n",
    "# print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y, y_pred)))\n",
    "# r2 = r2_score(y,y_pred)\n",
    "# print('R2 score:',r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = pd.read_csv('fake_data2.csv', index_col = False)\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X2 = df2[['Wellhead Press (psi)']].values\n",
    "X2 = X2.values\n",
    "X2 = StandardScaler().fit_transform(X2)\n",
    "X2_poly = pre_process.fit_transform(X2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2['CR-corrosion defect'] = model.predict(X2_poly)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.to_csv('fake_data_predicted.csv', index =False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.boxplot(df2.iloc[:,1,9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
